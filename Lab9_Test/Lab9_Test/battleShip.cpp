#include "battleship.h" // include header file
#include <cstdlib> // include C standard General Utilities Library for the use of rand
#include <iostream> // Standard input / output stream objects
#include <ctime> // C Time Library - for use of time(NULL)

using namespace std; // inclusion of namespace 

void location::pick() // definition of void method pick of class location
{
	srand((unsigned)time(NULL)); // random number generated by using time as a seed for srand
	x = rand() % 5 + 1;	// x is a  randomly generated number between 1 and 5
	y = 'a' + rand() % 5 + 1; // y is a randomly generated character from a - e
}

location::location() // definition of method location of class location
{
	x = -1; // x variable is initialized to -1 (means 'not hit')
	y = -1; // y variable is initialized to -1 (means 'not hit')
}

void location::fire() // definition of method fire of class location 
{
	cout << "Choose your x-axis firing coordinate! (1 - 5):" << endl; // when fire is initialized, it will as you to choose your x & y coordinates
	cin >> x;
	cout << "Choose your y-axis firing coordinate (a - e):" << endl; // and assign them to variables x & y
	cin >> y;
}

void location::print(void) const // definition of method print of the class location which is a constant... ? constant method? 
{
	cout << x << y; // outputs the values of x & y
}

bool compare(location one, location two) // definition of function compare which takes two location parameters names one and two
{
	if (one.x == two.x && one.y == two.y) // this if statement compares the the x & y values of structures one and two
		return true; // if they are equal, return true
	else
		return false; // otherwise return false
}

ship::ship() // definition of method ship within the class ship
{
	sunk = false; // sets the variable sunk equla to false
}

bool ship::match(const location& userShot) // definition of bool method match of the class ship which accepts the parameters the memory location of location and the value of usershot
const { // another const? Better look this up.
	return compare(loc, userShot); // this returns the bool result of the compare fuction... seems convoluted but compare is a friend function... idk.
}

void ship::sink() // definition of void method sink in class ship 
{
	sunk = true; // sets sunk equal to true if invoked
}

void ship::setLocation(const location& spot) // definition of setLocation which accepts the constant reference to location and spot
{
	loc = spot; // loc is set equal to spot
}

void ship::printShip(void) // 
const {
	loc.print();
	if (sunk == true)
		cout << " Sunk" << endl;
	else
		cout << " Not Sunk" << endl;
}

void fleet::deployFleet()
{
	for (int i = 0; i<5; i++)
	{
		location tmp;
		tmp.pick();
		ships[i].setLocation(tmp);

	}
}

bool fleet::operational()
const {
	for (int i = 0; i<5; i++)
	{
		if (ships[i].isSunk() == false)
			return true;
	}
	return false;
}

bool fleet::isHitNSink(const location& loc)
{
	for (int i = 0; i<5; i++)
	{
		if (ships[i].match(loc) == true)
		{
			ships[i].sink();
			return true;
		}
	}
	return false;
}

void fleet::printFleet(void)
const {
	for (int i = 0; i<5; i++)
	{
		ships[i].printShip();
	}
}